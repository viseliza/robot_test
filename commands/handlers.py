from config import dp, bot
from config.config import DEBUG
from database import User, Group
from keyboards import HomeKeyboard
from docParse import parseDocument

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import logging

#logging.info("ok")

class Options(StatesGroup):
    enter_group = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.chat.id
        
        # –î–µ–±–∞–≥ –ø—Ä–∏ –ª–æ–≥–≥–µ—Ä–µ
        #logging.info("ok")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ –±–∞–∑–µ
        if not await User.get(user_id):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await User.add(user_id)

        await bot.send_message(chat_id=user_id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}\n–Ø –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º novsu.ru –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º.\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É:\n–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ–Ω—ã", reply_markup=HomeKeyboard.main())
    except Exception as error:
        print(f'[ Commands/Handlers/process_start_command ] Error: {error}')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ–Ω"
@dp.message_handler(Text(equals="üóì –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ–Ω")) 
async def checkReplacement(msg: types.Message):
    await msg.answer(parseDocument('group'))


@dp.message_handler(Text(equals="üë• –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã"), state=None) 
async def selectGroup(msg: types.Message):
    await Options.enter_group.set()
    await msg.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã', reply=False, reply_markup=types.ReplyKeyboardRemove())



# –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã 
@dp.message_handler(state=Options.enter_group)
async def input_group(message: types.Message, state: FSMContext):
    #database.updateByQuery({"telegram_username": message.from_user.username }, {"telegram_username": message.from_user.username, "group": message.text})
    await message.answer('–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', reply=False, reply_markup=HomeKeyboard.main())
    await state.finish()